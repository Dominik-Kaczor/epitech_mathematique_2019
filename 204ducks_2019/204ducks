#!/usr/bin/env python3

import sys
from math import*

def primitives(a, t):
    return -a * exp(-t) - (4 - 3 * a) / 2 * exp(-2 * t) - (2 * a - 4) / 4 * exp(-4 * t)

def function(a, t):
    return a * exp(-t) + (4 - 3 * a) * exp(-2 * t) + (2 * a - 4) * exp(-4 * t)

def get_time(a):
    res = 0.0
    i = 0.0
    while i < 10:
        res += function(a, i) * i / 1000
        i += 0.001
    return res

def get_pourcent(a, value):
    t = 0.0
    res = 0.0
    while (res < value):
        res += 100 * 0.0001 * ((function(a, t) + function(a, (t + 0.0001))) / 2)
        t += 0.0001
    return t

def deviation(a, time):
    i = 0.0
    res = 0.0
    while (i < 100):
        res += 0.01 * pow((i + (0.01 / 2) - time), 2) * ((function(a, i) + function(a, (i + 0.01))) / 2)
        i += 0.01
    return sqrt(res)

def isfloat(value):
  try:
    float(value)
    return 1
  except ValueError:
    return 0

def main(argv):
    arg = len(argv)
    if (arg != 2):
        print("Error Bad argument 0 <= a <= 2.5")
        return 84
    elif (argv[1] == "-h"):
        print("USAGE")
        print("\t./204ducks a\n")
        print("DESCRIPTION")
        print("\ta\tconstant")
        return 0
    elif (isfloat(argv[1]) == 0 or float(argv[1]) > 2.5 or float(argv[1]) < 0):
        print("Error Bad argument 0 <= a <= 2.5")
        return 84
    else:
        a = float(argv[1])
        time = get_time(a)
        t50 = get_pourcent(a, 50)
        t99 = get_pourcent(a, 99)
        p1 = primitives(a, 1) - primitives(a, 0)
        p2 = primitives(a, 2) - primitives(a, 0)
        print("Average return time: %dm %.2ds" % (time, (time - int(time)) * 60 + 1))
        print("Standard deviation: %.3f" % deviation(a, time))
        print("Time after which 50%% of the ducks are back: %dm %.2ds" % (t50, round((t50 * 60) % 60, 0)))
        print("Time after which 99%% of the ducks are back: %dm %.2ds" % (t99, round((t99 * 60) % 60, 0)))
        print("Percentage of ducks back after 1 minute: %.1f%%" % (p1 * 100))
        print("Percentage of ducks back after 2 minutes: %.1f%%" % (p2 * 100))
    return 0

if (__name__ == "__main__"):
    exit(main(sys.argv))
